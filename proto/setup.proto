/*
Copyright 2015 Steven Loscalzo

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. 
*/

package search;

option java_package = "core.messages";
option java_outer_classname = "DispatcherCentricMessages";

//The overall setup of the experiments to be run in this usage of SearchParty
message Setup{
	optional string experiment_name = 1;
	repeated Parameter params = 2;
	//This is set to an experiment primary key in the data base
	//If it is set valid, it will cause the parameters and codebase
	//to be the same as in that experiment
	optional string continuation = 3;
	//Must be set unless a continuation is specified. If it is set,
	//then the code to use will be located at the given uri.
	required string git_uri = 4;
	required string git_branch = 5;
	optional string git_tag = 6;
	//For now, the code will not be compiled. Instead, it is assumed that
	//the appropriate commands are given to launch the appropriate executable,
	//and that the executable aligns with the given codebase. Perhaps in the
	//future it can be an option
	
	//The path and name of the database to store the resulting information to
	optional string database_path = 10 [default = "./results.db"];

	//The path from the git_uri to the executable
	optional string executable_command = 7;

	//These are the machines that are to be run on.
	repeated Machine exp_machine = 9;
	//These are the profiles to be used
	repeated Profile profile = 8;
	//The base random seed to initialize the random settings for each experiment
	optional int64 rand_seed = 11;
}

//Key-Value pairs for things like LD_LIBRARY_PATH=/usr/local/lib etc.
message EnvVariable{
	//The system variable name
	required string key = 1;
	//The system variable value
	required string value = 2;
}

message Machine{
	required string local_name = 1;
	//The number of replicates this machine can handle. No default given so that the default value will not override a profile value.
	optional int32 replicates = 2;
	optional string username = 3;
	//The working directory to run the experiment from.
	//Relative paths for the environment variables can be
	//expected to run from this directory.
	optional string working_dir = 7;
	//One of the following:
	//A list of environment variables that should be set to properly run the
	//experiment on this machine, these will override values set in the profile
	repeated EnvVariable env_variable = 4;
	optional OS os = 5 [default = LINUX];
	optional string remote_name = 6;
}

message Profile{
	repeated EnvVariable env_variables = 1;
	//The machine names where these variables should be set. If no names are
	//listed, then the settings are applied to all machines
	repeated string applicable_machines = 2;
	optional OS os = 3 [default = LINUX];
	optional int32 replicates = 4 [default = 1];
	optional string username = 5;
	//The working directory to execute the experiment command from. If
	//it does not exist, the program will crash.
	optional string working_dir = 6;
}

enum OS{
	LINUX = 0; //Variables are set with $ and path sep is :
	MAC = 1; 
	WINDOWS = 2; //Variables are set with % % and path sep is ;
}

message Parameter{
	required string param_name = 1;
	optional double min_value = 2 [default = 0];
	optional double max_value = 3 [default = 1];
	optional double growth_value = 4 [default = 0.1];
	optional GrowthPattern pattern = 5 [default = LINEAR];
	//specific_values is set when the growth pattern is set to specific
	repeated string specific_values = 6;
	//The number of times each experiment involving this parameter setting must be run
	optional int32 replicates = 7 [default = 1];
        //The data type of the values of this parameter
        optional DataType type = 8 [default = DOUBLE];
	enum GrowthPattern{
		LINEAR = 0;
		LOG = 1;
		SPECIFIC = 2;
	}
        enum DataType{
                DOUBLE = 0;
                INT = 1;
                STRING = 2;
        }
}

