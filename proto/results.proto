/*
Copyright 2015 Steven Loscalzo

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. 
*/

//This is a generic results reader that could be used to send results back and forth without requiring
//any protocol buffere work on the experimenter's part. That said, I believe this mechanism to be a little
//too error prone to be that useful, and am in favor of an experimenter designing their own thing.

package search;

option java_package = "core.messages";
option java_outer_classname = "ExperimentResults";

message ResultMessage{
	repeated Result reported_value = 1;
	//The machine that is running an experiment with these settings
	optional string machine_name = 2;
	//Machine specific unique ID
	optional int64 uid = 3;
	//Time the result message was constructed (machine, specific in millis)
	optional int64 timestamp = 4;
}

message Result{
	//The name of the result
	required string name = 1;
	//The value of the reported result, will be parsed according to the given type
	required string value = 2;
	//The data type of the result (for storage in DB), string will be attempted to be parsed as numeric
	optional Type type = 3 [default = string];
	enum Type{
		int32 = 0;
		float32 = 1;
		float64 = 2;
		string = 3;
		bool = 4;
		int64 = 5;
	}
}
