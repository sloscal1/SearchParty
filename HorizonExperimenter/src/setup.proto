package search;

option java_package = "core.messages";
option java_outer_classname = "DispatchMessages";

//This is where you describe your experiment format

message Experiment{
	optional string experiment_name = 1;
	repeated Parameter params = 2;
	//This is set to an experiment primary key in the data base
	//If it is set valid, it will cause the parameters and codebase
	//to be the same as in that experiment
	optional string continuation = 3;
	//Must be set unless a continuation is specified. If it is set,
	//then the code to use will be located at the given uri.
	required string git_uri = 4;
	required string git_branch = 5;
	optional string git_tag = 6;
	//For now, the code will not be compiled. Instead, it is assumed that
	//the appropriate commands are given to launch the appropriate executable,
	//and that the executable aligns with the given codebase. Perhaps in the
	//future it can be an option
	
	//The path from the git_uri to the executable
	optional string executable_command = 7;
	//The required variables to be set before the executable_command can be run
	repeated Env_Variable environment = 8;
	
	//These are the machines that are to be run on.
	repeated Machine machines = 9;
	
	//If you care, set the port that the Dispatcher will listen for Searcher conns
	optional string libzmq_path = 10 [default = "/usr/local/lib"];
	optional string libprotobuf_path = 11 [default = "/usr/lib"];
	optional string libsqlite_path = 12 [default = "/usr/lib"];
	required string search_party_path = 13;
}

message Env_Variable{
	required string name = 1;
	required string value = 2;
}

message Machine{
	required string name = 1;
	optional int32 replicates = 2 [default = 1];
	optional string username = 3;
}

message Parameter{
	required string param_name = 1;
	required double min_value = 2;
	required double max_value = 3;
	optional double growth_value = 4;
	optional GrowthPattern pattern = 5 [default = LINEAR];
	enum GrowthPattern{
		LINEAR = 0;
		GEOMETRIC = 1;
	}	
}